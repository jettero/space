# vi:ft=python:
# coding: utf-8

import logging
import re

def fix_at(lines):
    return [ re.sub(r'^(\s*)@(?:\.)?', 'o.', line) for line in lines ]
get_ipython().input_transformers_post.append(fix_at)

def mk_lots(cls, c=1000, *a, **kw):
    ''' use this with %lprun -f ClassName.__init__ mk_lots(ClassName) '''
    global lots
    lots = [ cls(*a, **kw) for _ in range(c) ]
    print("stored %d items in 'lots'", len(lots))

ANSI_RESET = "\x1b[m"
HILIGHT = []

def hilight(x, *color):
    if not color:
        color = (1,32)
    color = f'\x1b[{";".join(str(x) for x in color)}m'
    HILIGHT.append((x, color))
hi = hilite = hilight


class STFU(logging.Filter):
    def filter(self, record):
        if '/space/' not in record.pathname:
            return False
        for pat, color in HILIGHT:
            record.msg = re.sub(pat, lambda m: f"{color}{m.group(0)}{ANSI_RESET}", record.msg)
        return True
logging.basicConfig(level=logging.DEBUG)
for h in logging.root.handlers:
    h.addFilter(STFU())
del STFU; del h

from space.verb import VERBS, find_verb

from space.nico import nico
from space.vv import VV
from space.pv import PV
from space.dn import DN
from space.roll import Roll, roll, Check
from space.parser import Parser
from space.router import MethodRouter

import sys
sys.path.insert(0, 't')
from troom import a_map, o

P = Parser()

def do(cmd):
    return o.me.do(cmd)

;hilite preprocess_tokens

;do open door; sSW6s3w; get bauble; 3e4n
;do move nsew nsew
